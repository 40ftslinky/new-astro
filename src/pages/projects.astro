---
// content
const uniqueID = "projects";
const pageTitle = "Projects";
const metaTitle = "Projects meta Title tbc";
const metaDescription = "Projects page meta description tbc";
const pageHead = "We solve problems for your brands.";
const pageDesc = "We are a team of creatives who are excited about unique ideas and create amazing identity by crafting brilliant brand experiences.";
const pageContent = "Projects page content tbc";

// layout
import BaseLayout from '../layouts/BaseLayout.astro';
import { fade } from "astro:transitions";

// components
import Grid from '../components/Grid.astro';
// import Image from '../components/ImageCard.astro';
import PortfolioPreview from '../components/PortfolioPreview.astro';


// import content
import { getCollection } from 'astro:content';

// replace import.meta.glob() with getCollection() as the way to fetch content and metadata from Markdown files.
// const projects = Object.values(import.meta.glob('./projects/*.md', { eager: true }));
// const projects = await getCollection('projects');

// Get all entries from a collection.
// Requires the name of the collection as an argument.
// Content Fetching: List four most recent work projects
const projects = (await getCollection('projects'))
	.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf())
	.slice(0, 10);

const allProjects = await getCollection("projects");
const tags = [...new Set(allProjects.map((project) => project.data.tags).flat())];
const industry = [...new Set(allProjects.map((project) => project.data.industry).flat())];


---

<BaseLayout
	uniqueID={uniqueID} 
	pageTitle={pageTitle} 
	metaTitle={metaTitle} 
	metaDescription={metaDescription}
	pageHead={pageHead}
	pageDesc={pageDesc}
	pageContent={pageContent}
>

	<section class="text-animate" data-color-primary="var(--accent-purple)" data-color-secondary="var(--accent-warm-purple)">

		<h1 class="text-gradient" transition:animate={fade({ duration: '1s' })} >{pageHead}</h1>
		<h2 class="subtitle">{pageDesc}</h2>
		<!-- <p>{pageContent}</p> -->

		
	</section>

	<section class="animate">
		<div class="row has-divider">
			<div class="column col_title">
				<h2>Recent Projects</h2>
			</div>
		</div>

		<div class="row ">
			<div class="column ">

				<div class="tags">
					{tags.map((tag) => (
						<a class="tag" href={`/tags/${tag}`}>{tag}</a>
					))}
				</div>

				<div class="industry-tags">
					{industry.map((industry) => (
						<a class="industry-tag"href={`/industry/${industry}`}>{industry}</a>
					))}
				</div>

				<div class="gallery">
					<Grid variant="offset">
						{
							projects.map((project) => (
								<li>
									<PortfolioPreview project={project} />
								</li>
							))
						}
					</Grid>
				</div>

				<!-- <Image
					imagePath="/src/assets/dynamic/Editorial-Mockup_00.jpg"
					altText="An image alt text"
					name="Editorial-Mockup_00"
					desc="Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."
				/> -->
				
				<!-- {
						allProjects.map((project: any) => (
							<li><a href={project.url}>{project.frontmatter.title}</a></li>
						))
					}  -->

			</div>
		</div>	

		
	</section>

	

</BaseLayout>

<script is:inline>
	// 
	document.addEventListener('DOMContentLoaded', () => {
        // Select elements
        const mainElement = document.querySelector("main");
        const textAnimateSection = document.querySelector("section.text-animate");
        const textGradientElement = document.querySelector("h1.text-gradient");

        // Ensure elements exist before proceeding
        if (!mainElement || !textAnimateSection || !textGradientElement) {
            console.error("Required elements not found in the DOM.");
            return;
        }

        // Add mousemove event listener to the main element
        mainElement.addEventListener("mousemove", (event) => {
            const rect = mainElement.getBoundingClientRect(); // Use the main element's bounding box
            const mouseX = event.clientX - rect.left; // X-coordinate relative to the main element
            const mouseY = event.clientY - rect.top; // Y-coordinate relative to the main element
            const percentageX = (mouseX / rect.width) * 100; // Percentage X
            const percentageY = (mouseY / rect.height) * 100; // Percentage Y

            // Create the radial gradient
            const gradient = `radial-gradient(circle at ${percentageX.toFixed(2)}% ${percentageY.toFixed(2)}%, ${textAnimateSection.dataset.colorPrimary}, ${textAnimateSection.dataset.colorSecondary})`;

            // Apply the gradient to the h1 element
            textGradientElement.style.backgroundImage = gradient;
        });

        // Add mouseleave event listener to reset the gradient
        // mainElement.addEventListener("mouseleave", () => {
        //     textGradientElement.style.backgroundImage = "none";
        // });
    });

</script>